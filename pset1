# Load libraries
using Plots

# Question 1
function factorial2(n::Int64)
    fact = 1
    for i in 1:n
        fact *= i
    end
    return fact
end

# Question 2
function p(x::Float64, coeff::Vector{Float64})
    val = 0
    for (i, a) in enumerate(coeff)
        val += a * x^(i-1)
    end
    return val
end

# Question 3
function sim_pi(n::Int64)
    B = 0
    for i in 1:n
        a, b = rand(2)
        d = sqrt((0.5 - a)^2 + (0.5 - b)^2)
        B += (d <= 0.5)
    end
    return 4 * B / n
end

# Question 4
function sim_data(a::Float64, b::Float64, c::Float64, d::Float64, σ::Float64, n::Int64)
    # Initialize
    x₁, x₂ = randn(50), randn(50)
    coefs = []

    # Simulations
    for i in 1:n
        # Generate w, y
        w = randn(50)
        y = a .* x₁ .+ b .* x₁.^2 .+ c .* x₂ .+ d .+ σ .* w

        # Regression
        X = hcat(x₁, x₁.^2, x₂, ones(50))
        coef = inv(X' * X) * X' * y
        push!(coefs, coef)
    end
    p1 = histogram(coefs[1,:], bins=10, title="a")
    p2 = histogram(coefs[2,:], bins=10, title="b")
    p3 = histogram(coefs[3,:], bins=10, title="c")
    p4 = histogram(coefs[4,:], bins=10, title="d")
    Plots.plot(p1, p2, p3, p4, layout = (2,2), legend=:none)
end
sim_data(0.1, 0.2, 0.5, 1.0, 0.1, 200)

# Question 5
function random_walk(n::Int64, tmax::Int64, α::Float64, σ::Float64, a::Float64)
    # Initializations
    x₀ = 1
    T = []

    # Simulations
    for i in 1:n
        # Generate data
        xₚ = x₀
        for i in 1:tmax
            # Next data point and check
            xₜ = α * xₚ + σ * randn()
            if xₜ <= a || i == tmax
                push!(T, i)
                break
            end
            xₚ = xₜ
        end
    end
    histogram(T, bins=10, title="Stopping Times", legend=:none)
end
random_walk(100, 200, 0.8, 0.2, 0.0)
random_walk(100, 200, 1.0, 0.2, 0.0)
random_walk(100, 200, 1.2, 0.2, 0.0)

# Question 6
function newton(f, fₚ, x₀::Float64, tol::Float64, maxiter::Int64)
    # Initial guess
    xₚ = x₀
    xₜ = xₚ - f(xₚ) / fₚ(xₚ)

    # Loop until tolerance or maximum iterations
    for i in 1:maxiter
        # Update guess
        xₚ = xₜ
        xₜ = xₚ - f(xₚ) / fₚ(xₚ)

        # Check stopping condition
        if abs(xₜ - xₚ) <= tol
            println("Found root at $xₜ in $i iterations.")
            return xₜ
        end
    end

    # Return at maximum iterations
    println("Found root at $xₜ in $maxiter iterations.")
    return xₜ
end
f(x) = (x - 1)^3
fₚ(x) = 3 * (x - 1)^2
newton(f, fₚ, 0.0, 1e-3, 100)